openapi: 3.0.0
servers: []
info:
  title: Parking Space Audit API
  description: This API provides audit info
  contact:
    email: jparras1@my.bcit.ca
  version: "1.0.0"

paths:
  /park:
    get:
      summary: Gets occupied parking spots from history
      description: Gets the occupied parking spots from the event store
      operationId: app.get_spots_occupied
      parameters:
        - name: index
          in: query
          description: Gets the parking report at the index in the event store
          schema:
            type: integer
            example: 5
      responses:
        '200':
          description: Successfully returned a parking event
          content:
            application/json:
              schema:
                type: object
                required:
                  - device_id
                  - spot_id
                  - timestamp
                  - parking_duration
                properties:
                  device_id:
                    type: string
                    description: The unique ID of the device reporting the parking event
                    format: uuid
                    example: d290f1ee-6c54-4b01-90e6-d701748f0851
                  spot_id:
                    type: integer
                    description: The parking spot number
                    example: 17
                  timestamp:
                    type: string
                    description: timestamp when the spot was occupied
                    format: date-time
                    example: '2016-08-29T09:12:33.001Z'
                  parking_duration:
                    type: integer
                    description: Duration in minutes for which the car will be parked.
                    example: 120
        '400':
          description: Invalid request
        '404':
          description: No events for the requested index
  /reserve:
    get:
      summary: Gets reserved parking spots from history
      description: Gets the reserved parking spots from the event store
      operationId: app.get_spots_reserved
      parameters:
        - name: index
          in: query
          description: Gets the reservation report at the index in the event store
          schema:
            type: integer
            example: 5
      responses:
        '200':
          description: Successfully returned a reservation event
          content:
            application/json:
              schema:
                type: object
                required:
                  - device_id
                  - spot_id
                  - timestamp
                  - parking_time
                properties:
                  device_id:
                    type: string
                    description: The unique ID of the device reporting the parking event
                    format: uuid
                    example: d290f1ee-6c54-4b01-90e6-d701748f0851
                  spot_id:
                    type: integer
                    description: The parking spot number
                    example: 17
                  timestamp:
                    type: string
                    description: timestamp when the spot was occupied
                    format: date-time
                    example: '2016-08-29T09:12:33.001Z'
                  parking_time:
                    type: string
                    description: The time when the user will occupy the spot
                    format: date-time
                    example: '2016-08-29T09:12:33.001Z'
        '400':
          description: Invalid request
        '404':
          description: No events for the requested index
  /stats:
    get:
      summary: Gets the count of each event currently in the queue
      description: Returns statistics about the events
      operationId: app.get_stats
      responses:
        '200':
          description: Successfully returned a list of counts of each events in the queue
          content:
            application/json:
              schema:
                type: object
                properties:
                  num_park_car:
                    type: integer
                    example: 100
                  num_reserve_spot:
                    type: integer
                    example: 100
  /id/park:
    get:
      summary: Gets the list of event IDs and trace IDs of the park event
      description: Gets the list of event IDs and trace IDs of the park event
      operationId: app.get_park_event_list
      responses:
        '200':
          description: Successfully returned a list event ids and trace ids of the park event
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    event_id:
                      type: string
                      description: the id of an event
                      example: d290f1ee-6c54-4b01-90e6-d701748f0851
                    trace_id:
                      type: string
                      description: the trace id of an event
                      example: '3434efeasef'

  /id/reserve:
    get:
      summary: Gets the list of event IDs and trace IDs of the reserve event
      description: Gets the list of event IDs and trace IDs of the reserve event
      operationId: app.get_reserve_event_list
      responses:
        '200':
          description: Successfully returned a list event ids and trace ids of the reserve event
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    event_id:
                      type: string
                      description: the id of an event
                      example: d290f1ee-6c54-4b01-90e6-d701748f0851
                    trace_id:
                      type: string
                      description: the trace id of an event
                      example: '3434efeasef'